version: '3.9'

# References: https://github.com/diemol/selenium-issues/blob/master/docker-selenium/issue-1463/docker-compose.yml
# https://github.com/SeleniumHQ/docker-selenium/issues/1463

services:
  sql-data:
    environment:
      SA_PASSWORD: 123456Abc
      ACCEPT_EULA: 'Y'
      MSSQL_AGENT_ENABLED: 'True'
    ports:
      - '14330:1433'
    volumes:
      - Easy.Platform-sqldata:/var/opt/mssql

  mongo-data:
    ports:
      - '27017:27017'
    volumes:
      - mongo1data-db:/data/db
      - mongo1data-configdb:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=rootPassXXX
      #- MONGO_REPLICA_SET_NAME=rs0
      #https://stackoverflow.com/questions/42190267/replica-set-mongo-docker-compose
      #https://github.com/Hangfire-Mongo/Hangfire.Mongo/issues/300 Fix for local hangfire mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      #test: test $$(echo "rs.initiate({_id:'rs0',members:[{_id:0,host:\"mongo:27017\"}]}).ok || rs.status().ok" | mongo -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet) -eq 1
      interval: 5s
      retries: 10 #This property specifies the number of consecutive health check failures required to declare the container as unhealthy.
      start_period: 30s #provides initialization time for containers that need time to bootstrap
    #command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27017']
    mem_limit: 1000m
    restart: on-failure

  rabbitmq:
    ports:
      - '15672:15672'
      - '5672:5672'
    volumes:
      - Easy.Platform-rabbitmq-volume:/var/lib/rabbitmq

  redis-cache:
    ports:
      - '6379:6379'
    volumes:
      - Easy.Platform-redis-cache-data:/data

  postgres-sql:
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '54320:5432'
    volumes:
      - Easy.Platform-postgres-sql-data:/var/lib/postgresql/data
      - Easy.Platform-postgres-sql-pgdata:/var/lib/postgresql/pgdata
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    command: ['postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf']

  text-snippet-api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development.Docker
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionStrings__DefaultConnection=${ConnectionStrings__DefaultConnection:-Server=sql-data;Database=TextSnippedDb;User Id=sa;Password=123456Abc;Encrypt=False}
      - ConnectionStrings__PostgreSqlConnection=${ConnectionStrings__PostgreSqlConnection:-Host=localhost;Port=54320;Username=postgres;Password=postgres;Database=TextSnippedDb}
      - RedisCacheOptions__Connection=${RedisCacheOptions__Connection:-localhost:6379,ConnectTimeout=5000,abortConnect=false}
      - MongoDB__ConnectionString=${MongoDB__ConnectionString:-mongodb://root:rootPassXXX@localhost:27017?authSource=admin}
      - UseDbType=${UseDbType:-Postgres}
      - RabbitMqOptions__HostNames=rabbitmq
      - RandomThrowExceptionForTesting=${RandomThrowExceptionForTesting:-true}
      - CORECLR_ENABLE_PROFILING=${CORECLR_ENABLE_PROFILING:-1}
      - CORECLR_PROFILER=${CORECLR_PROFILER:-{BD1A650D-AC5D-4896-B64F-D6FA25D6B26A}}
      - CORECLR_PROFILER_PATH=${CORECLR_PROFILER_PATH:-/app/Pyroscope.Profiler.Native.so}
      - LD_PRELOAD=${LD_PRELOAD:-/app/Pyroscope.Linux.ApiWrapper.x64.so}
      - PYROSCOPE_APPLICATION_NAME=${PYROSCOPE_APPLICATION_NAME:-text-snippet-api}
      - PYROSCOPE_SERVER_ADDRESS=${PYROSCOPE_SERVER_ADDRESS:-http://localhost:4040}
      - PYROSCOPE_LOG_LEVEL=${PYROSCOPE_LOG_LEVEL:-debug}
      - PYROSCOPE_PROFILING_ENABLED=${PYROSCOPE_PROFILING_ENABLED:-0}
      - PYROSCOPE_PROFILING_CPU_ENABLED=${PYROSCOPE_PROFILING_CPU_ENABLED:-0}
      - PYROSCOPE_PROFILING_ALLOCATION_ENABLED=${PYROSCOPE_PROFILING_ALLOCATION_ENABLED:-0}
      - PYROSCOPE_PROFILING_LOCK_ENABLED=${PYROSCOPE_PROFILING_LOCK_ENABLED:-0}
      - PYROSCOPE_PROFILING_EXCEPTION_ENABLED=${PYROSCOPE_PROFILING_EXCEPTION_ENABLED:-0}
    ports:
      - '5001:80'
    healthcheck:
      test: curl --fail http://0.0.0.0:80 || exit 1
      interval: 5s
      timeout: 10s #This property specifies the number of seconds Docker awaits for your health check command to return an exit code before declaring it as failed.
      retries: 20 #This property specifies the number of consecutive health check failures required to declare the container as unhealthy.
      start_period: 10s #provides initialization time for containers that need time to bootstrap
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    mem_limit: 300m

  text-snippet-webspa:
    build:
      args:
        configuration: 'docker-dev'
    environment:
      - __TEXT_SNIPPET_API_HOST__=${__TEXT_SNIPPET_API_HOST__:-http://localhost:5001}
    ports:
      - '4001:80'

  chrome1:
    image: selenium/node-chrome:111.0
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      # - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_HOST=localhost
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_PORT=55000
      - VNC_PORT=59000
      - DISPLAY=:1.0
      - DISPLAY_NUM=1
      - SCREEN_WIDTH=1280
      - SCREEN_HEIGHT=720
    network_mode: 'host'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    # command: bash -c "sudo chmod 777 /etc/hosts && sudo sed 's/127.0.0.1\s\{1,\}localhost/#127.0.0.1       localhost/g' /etc/hosts > /tmp/hosts-new && sudo cp /tmp/hosts-new /etc/hosts && sudo cat /etc/hosts && /opt/bin/entry_point.sh"
  chrome2:
    image: selenium/node-chrome:111.0
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      # - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_HOST=localhost
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_PORT=55010
      - VNC_PORT=59010
      - DISPLAY=:2.0
      - DISPLAY_NUM=2
      - SCREEN_WIDTH=1280
      - SCREEN_HEIGHT=720
    network_mode: 'host'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    # command: bash -c "sudo chmod 777 /etc/hosts && sudo sed 's/127.0.0.1\s\{1,\}localhost/#127.0.0.1       localhost/g' /etc/hosts > /tmp/hosts-new && sudo cp /tmp/hosts-new /etc/hosts && sudo cat /etc/hosts && /opt/bin/entry_point.sh"

  edge:
    image: selenium/node-edge:111.0
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      # - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_HOST=localhost
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_PORT=55200
      - VNC_PORT=59200
      - DISPLAY=:21.0
      - DISPLAY_NUM=21
      - SCREEN_WIDTH=1280
      - SCREEN_HEIGHT=720
    network_mode: 'host'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    # command: bash -c "sudo chmod 777 /etc/hosts && sudo sed 's/127.0.0.1\s\{1,\}localhost/#127.0.0.1       localhost/g' /etc/hosts > /tmp/hosts-new && sudo cp /tmp/hosts-new /etc/hosts && sudo cat /etc/hosts && /opt/bin/entry_point.sh"

  firefox:
    image: selenium/node-firefox:111.0
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      # - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_HOST=localhost
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_PORT=55400
      - VNC_PORT=59400
      - DISPLAY=:41.0
      - DISPLAY_NUM=41
      - SCREEN_WIDTH=1280
      - SCREEN_HEIGHT=720
    network_mode: 'host'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    # command: bash -c "sudo chmod 777 /etc/hosts && sudo sed 's/127.0.0.1\s\{1,\}localhost/#127.0.0.1       localhost/g' /etc/hosts > /tmp/hosts-new && sudo cp /tmp/hosts-new /etc/hosts && sudo cat /etc/hosts && /opt/bin/entry_point.sh"

  selenium-hub:
    image: selenium/hub:4.4.0-20220831
    container_name: selenium-hub
    # network_mode: "host"
    ports:
      - '4442:4442'
      - '4443:4443'
      - '4444:4444'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    # command: bash -c "sudo chmod 777 /etc/hosts && sudo sed 's/127.0.0.1\s\{1,\}localhost/#127.0.0.1       localhost/g' /etc/hosts > /tmp/hosts-new && sudo cp /tmp/hosts-new /etc/hosts && sudo cat /etc/hosts && /opt/bin/entry_point.sh"

  text-snippet-automation-test:
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development.Docker}
      - AutomationTestSettings__AppNameToOrigin__TextSnippetApp=${AutomationTestSettings__AppNameToOrigin__TextSnippetApp:-http://localhost:4001}
      - AutomationTestSettings__RemoteWebDriverUrl=${AutomationTestSettings__RemoteWebDriverUrl:-http://localhost:4444/wd/hub}
      - AutomationTestSettings__WebDriverType=${AutomationTestSettings__WebDriverType:-Chrome}
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    command: bash -c "echo 'Sleep 60s waiting for other app started to run automation test' && sleep 60s && /opt/bin/entry_point.sh"

  text-snippet-automation-test-bdd-chrome:
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development.Docker}
      - AutomationTestSettings__AppNameToOrigin__TextSnippetApp=${AutomationTestSettings__AppNameToOrigin__TextSnippetApp:-http://localhost:4001}
      - AutomationTestSettings__RemoteWebDriverUrl=${AutomationTestSettings__RemoteWebDriverUrl:-http://localhost:4444/wd/hub}
      - AutomationTestSettings__WebDriverType=${AutomationTestSettings__WebDriverType:-Chrome}
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    command: bash -c "echo 'Sleep 60s waiting for other app started to run automation test' && sleep 60s && /opt/bin/entry_point.sh"

  text-snippet-automation-test-bdd-edge:
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development.Docker}
      - AutomationTestSettings__AppNameToOrigin__TextSnippetApp=${AutomationTestSettings__AppNameToOrigin__TextSnippetApp:-http://localhost:4001}
      - AutomationTestSettings__RemoteWebDriverUrl=${AutomationTestSettings__RemoteWebDriverUrl:-http://localhost:4444/wd/hub}
      - AutomationTestSettings__WebDriverType=${AutomationTestSettings__WebDriverType:-Edge}
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    command: bash -c "echo 'Sleep 60s waiting for other app started to run automation test' && sleep 60s && /opt/bin/entry_point.sh"

  text-snippet-automation-test-bdd-firefox:
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development.Docker}
      - AutomationTestSettings__AppNameToOrigin__TextSnippetApp=${AutomationTestSettings__AppNameToOrigin__TextSnippetApp:-http://localhost:4001}
      - AutomationTestSettings__RemoteWebDriverUrl=${AutomationTestSettings__RemoteWebDriverUrl:-http://localhost:4444/wd/hub}
      - AutomationTestSettings__WebDriverType=${AutomationTestSettings__WebDriverType:-Firefox}
    extra_hosts:
      - 'host.docker.internal:host-gateway'
      - 'localhost:host-gateway'
    command: bash -c "echo 'Sleep 60s waiting for other app started to run automation test' && sleep 60s && /opt/bin/entry_point.sh"

volumes:
  Easy.Platform-sqldata:
    external: false
  Easy.Platform-mongodata-db:
    external: false
  Easy.Platform-mongodata-configdb:
    external: false
  Easy.Platform-rabbitmq-volume:
    external: false
  Easy.Platform-redis-cache-data:
    external: false
  Easy.Platform-postgres-sql-data:
    external: false
  Easy.Platform-postgres-sql-pgdata:
    external: false

networks:
  default:
    name: platform-example-app-network
    external: true
